<launch>

    <!-- screen parameters - dimensions and angles -->
        <param name="screenAngleInDegrees" type="int" value="46"/>
        <param name="screenHeight" type="double" value="380"/> <!-- mm -->
        <param name="screenWidth" type="double" value="520"/><!-- mm -->
        <param name="screenGap" type="double" value="20"/><!-- border margin of the screen, mm -->

    <param name="robot_x_wf" type="double" value="340"/> <!-- mm -->
    <param name="robot_y_wf" type="double" value="-100"/> <!-- mm -->
    <param name="robot_z_wf" type="double" value="225"/> <!-- mm -->

    <node pkg="clm_ros_wrapper" type="scene_publisher" name="scene_publisher" output="screen"> 
        <param name="device_test" type="int" value="0"/>
    </node>

    <group ns="/sar/perception/right_cam" if="false">

        <!-- camera frame to world frame transformation matrix row-major representation-->
        <!-- <rosparam param = "transformation_cf2intermediate_frame">[-1, 0, 0, 280, 0, 0, -1, 410, 0, -1, 0, 340, 0, 0 , 0, 1]</rosparam>
        <rosparam param = "transformation_intermediate_frame2wf">[0.9130, -0.4078, 0, 0, 0.4078, 0.9130, 0, 0, 0, 0, 1, 0, 0,0 , 0, 1]</rosparam> -->

        <rosparam param = "transformation_cf2intermediate_frame">[0.9156, 0.4021, 0, 625, -0.4021, 0.9156, 0, 405, 0,0,1,400, 0,0,0,1]</rosparam>
        <!-- <rosparam param = "transformation_cf2intermediate_frame">[0.90956, 0.41557, 0, 620, -0.41557, 0.90956, 0, 410, 0,0,1,400, 0,0,0,1]</rosparam> -->
        <rosparam param = "transformation_intermediate_frame2wf">[-1,0,0,0.0,0,0,-1,0.0,0,-1,0,0.0,0,0,0,1]</rosparam>

        <!-- world frame to robot frame transformation matrix row-major representation-->
        <!-- <rosparam param = "transformation_wf2rf">[-0.7041, 0.7100, 0, 340, -0.7100, -0.7041, 0, -100, 0, 0, 1, 0, 0,0 , 0, 1]</rosparam> -->
        
        <rosparam param = "transformation_wf2rf">[-0.23313, -0.97244, 0, 315.57679, 0.97244, -0.23313, 0, -586.38482, 0, 0, 1, 0, 0 , 0, 0, 1]</rosparam>

        <!-- screen parameters - dimensions and angles -->
        <param name="screenAngleInDegrees" type="int" value="46"/>
        <param name="screenHeight" type="double" value="380"/> <!-- mm -->
        <param name="screenWidth" type="double" value="520"/><!-- mm -->

       <param name="offset_hfv_wf_z" type="double" value="0"/> <!-- "-0.1"-->
        <param name="offset_head_position_cf_z" type="double" value="200"/> <!-- box size -->

        <!-- robot parameters - radius for inside/outside check-->
        <param name="robot_radius" type="double" value="220"/> <!-- mm -->

        <param name="ns" type="string" value="clm_ros_wrapper_1"/>
        <param name="cam" type="string" value="usb_cam_1"/>

        <node name="usb_cam_1" pkg="usb_cam" type="usb_cam_node" output="screen" >
            <param name="video_device" value="/dev/video0" />
            <param name="image_width" value="640" /> <!-- 640 -->
            <param name="image_height" value="480" /> <!-- 480-->
            <param name="pixel_format" value="yuyv" />
            <param name="camera_frame_id" value="usb_cam" />
            <param name="io_method" value="mmap"/>
        </node>


        <node pkg="clm_ros_wrapper" type="clm_ros_wrapper" name="clm_ros_wrapper" output="screen"> 
            <param name ="device_test" type ="int" value="0"/> 
        </node>

        <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
            <remap from="image" to="clm_ros_wrapper_1/face_image"/>
            <param name="autosize" value="true" />
        </node>

        <node pkg="clm_ros_wrapper" type="find_gazepoint" name="find_gazepoint" output="screen"> 
            <param name="device_test" type="int" value="0"/>
        </node>

    </group>


    <group ns="/sar/perception/left_cam" if="true"> <!-- tracking cam -->

        <!-- camera frame to world frame transformation matrix row-major representation-->
        <!-- <rosparam param = "transformation_cf2intermediate_frame">[-1, 0, 0, 280, 0, 0, -1, 410, 0, -1, 0, 340, 0, 0 , 0, 1]</rosparam>
        <rosparam param = "transformation_intermediate_frame2wf">[0.9130, -0.4078, 0, 0, 0.4078, 0.9130, 0, 0, 0, 0, 1, 0, 0,0 , 0, 1]</rosparam> -->
        
        <rosparam param = "transformation_intermediate_frame2wf">[-1,0,0,0.0,0,0,-1,0.0,0,-1,0,0.0,0,0,0,1]</rosparam>

        <rosparam param = "transformation_cf2intermediate_frame">[1,0,0,400, 0,1,0, 450, 0,0,1, 410,0,0,0,1]</rosparam>

        <!-- world frame to robot frame transformation matrix row-major representation-->
        <!-- <rosparam param = "transformation_wf2rf">[-0.7041, 0.7100, 0, 340, -0.7100, -0.7041, 0, -100, 0, 0, 1, 0, 0,0 , 0, 1]</rosparam> -->
        
        <rosparam param = "transformation_wf2rf">[-0.23313, -0.97244, 0, 315.57679, 0.97244, -0.23313, 0, -586.38482, 0, 0, 1, 0, 0 , 0, 0, 1]</rosparam>

        <!-- screen parameters - dimensions and angles -->
        <param name="screenAngleInDegrees" type="int" value="46"/>
        <param name="screenHeight" type="double" value="380"/> <!-- mm -->
        <param name="screenWidth" type="double" value="520"/><!-- mm -->

        <!-- face recognition parameters-->
        <param name="face_recognizer_file_location" type="string" value="/home/sar/face_analyzer_data/"/>
        <param name="child_confidence_threshold" type="int" value="3000"/>
        <param name="parent_confidence_threshold" type="int" value="3000"/>

        <!-- calibration -->
        <param name="offset_hfv_wf_z" type="double" value="0"/> <!-- "-0.1"-->
        <param name="offset_head_position_cf_z" type="double" value="200"/> <!-- box size -->

        <!-- robot parameters - radius for inside/outside check-->
        <param name="robot_radius" type="double" value="220"/> <!-- mm -->

        <param name="ns" type="string" value="clm_ros_wrapper_0"/>
        <param name="cam" type="string" value="usb_cam_0"/>

        <node name="usb_cam_0" pkg="usb_cam" type="usb_cam_node" output="screen" >
            <param name="video_device" value="/dev/video1" />
            <param name="image_width" value="1280" /> <!-- 1280 -->
            <param name="image_height" value="720" /> <!-- 720-->
            <param name="pixel_format" value="yuyv" />
            <param name="camera_frame_id" value="usb_cam" />
            <param name="io_method" value="mmap"/>
        </node>

        <!-- <node pkg="clm_ros_wrapper" type="scene_publisher" name="scene_publisher" output="screen"> 
            <param name="device_test" type="int" value="0"/>
        </node> -->

        <node pkg="clm_ros_wrapper" type="clm_ros_wrapper" name="clm_ros_wrapper" output="screen"> 
            <param name ="device_test" type ="int" value="0"/> 
        </node>

        <!-- DO NOT SHOW IMAGE: tracking view -->
        <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
            <remap from="image" to="clm_ros_wrapper_0/face_image"/>
            <param name="autosize" value="true" />
        </node>
        

        <node pkg="clm_ros_wrapper" type="find_gazepoint" name="find_gazepoint" output="screen"> 
            <param name="device_test" type="int" value="0"/>
        </node>

        <!-- <node pkg="clm_ros_wrapper" type="target_detector" name="target_detector" output="screen"> 
            <param name="device_test" type="int" value="0"/>
        </node> -->

    </group>

    <node pkg="clm_ros_wrapper" type="target_detector" name="target_detector" output="screen"> 
        <param name="device_test" type="int" value="0"/>
    </node>

    <group if="true">
        <node name="usb_cam_1" pkg="usb_cam" type="usb_cam_node" output="screen" >
            <param name="video_device" value="/dev/video0" />
            <param name="image_width" value="1280" /> <!-- 640 -->
            <param name="image_height" value="720" /> <!-- 480-->
            <param name="pixel_format" value="yuyv" />
            <param name="camera_frame_id" value="usb_cam" />
            <param name="io_method" value="mmap"/>
        </node>
        <!-- DO NOT SHOW IMAGE: recording cam -->
        <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
            <remap from="image" to="/usb_cam_1/image_raw"/>
            <param name="autosize" value="true" />
        </node>
        
    </group>

</launch>
